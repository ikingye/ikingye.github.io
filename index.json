[{"authors":["yewang"],"categories":null,"content":" 叶王，90 年生于福建，现居深圳 软件工程师，当前主要从事云原生领域后台开发 关注云原生，边缘计算，机器学习，大数据 信仰科学，唯物主义 喜欢读书，电影，音乐，NBA  ","date":1653207338,"expirydate":-62135596800,"kind":"term","lang":"zh","lastmod":1653207338,"objectID":"52b3e5cfaaca3637c8b56e99b9e4b499","permalink":"https://blog.kingye.me/authors/yewang/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/yewang/","section":"authors","summary":"叶王，90 年生于福建，现居深圳 软件工程师，当前主要从事云原生","tags":null,"title":"叶王","type":"authors"},{"authors":["kangduo"],"categories":null,"content":" Java 后端研发，团队 Leader 现居南京 个人博客：http://blog.prcode.org/  ","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"zh","lastmod":-62135596800,"objectID":"7dcf3dd6e1b5b35b5fc86b11a679d8d8","permalink":"https://blog.kingye.me/authors/kangduo/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/kangduo/","section":"authors","summary":"Java 后端研发，团队 Leader 现居南京 个人博客：http://blog.","tags":null,"title":"康夺","type":"authors"},{"authors":null,"categories":null,"content":"Go 编程深入浅出\n","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"zh","lastmod":1536451200,"objectID":"ef05f269a63e1175d00713a7485da22e","permalink":"https://blog.kingye.me/books/go-advanced/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/books/go-advanced/","section":"books","summary":"Go 编程深入浅出","tags":null,"title":"Go 进阶编程","type":"book"},{"authors":null,"categories":null,"content":"Rust 编程深入浅出\n","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"zh","lastmod":1536451200,"objectID":"4f509e18fec6663d3e9b22ab285d5a72","permalink":"https://blog.kingye.me/books/rust-advanced/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/books/rust-advanced/","section":"books","summary":"Rust 编程深入浅出","tags":null,"title":"Rust 进阶编程","type":"book"},{"authors":["叶王"],"categories":[],"content":" 每一级行政机构下设有内设和外管两套系统，外管指其管辖下级行政区划的机构，内设部门一般与其平级 国家部委只到处室（县处级），省和地级市只到科室（乡科级），县和乡到股/所（股级）   特殊规则   直辖市（北京、上海、天津、重庆）为省级行政单位，下属部门级别也均上调一级\n  副省级城市及其下属部门高半级\n 中国现有 15 个副省级市  东北地区（4 个）：沈阳市、大连市、长春市、哈尔滨市 华东地区（6 个）：南京市、杭州市、济南市、青岛市、宁波市、厦门市 华中地区（1 个）：武汉市 华南地区（2 个）：广州市、深圳市 西南地区（1 个）：成都市 西北地区（1 个）：西安市        副省级市辖区（2 个）：天津市滨海新区、上海市浦东新区。  重庆市万州区属于高配       中国大陆的高校全部是厅局级单位（不含军校）。本科高校一般为正厅级，专科院校为副厅级。 其中 32 所大学由于自身实力得到中央认可，其党委书记和校长高配为副部级，由中共中央、中央组织部联合任命，而非通常由国家部委或省、市政府任命。这些高校的常务副书记和常务副校长为正厅级。  北京市（7 所）清华大学、北京大学、中国人民大学、北京航空航天大学、北京理工大学、北京师范大学、中国农业大学 上海市（3 所）复旦大学、上海交通大学、同济大学 陕西省（3 所）西安交通大学、西北工业大学、西北农林科技大学 天津市（2 所）天津大学、南开大学 江苏省（2 所）南京大学、东南大学 湖北省（2 所）武汉大学、华中科技大学 湖南省（2 所）中南大学、国防科技大学 广东省（1 所）中山大学 浙江省（1 所）浙江大学 重庆市（1 所）重庆大学 福建省（1 所）厦门大学 山东省（1 所）山东大学 四川省（1 所）四川大学 安徽省（1 所）中国科技大学 甘肃省（1 所）兰州大学 吉林省（1 所）吉林大学 辽宁省（1 所）大连理工大学 黑龙江省（1 所）哈尔滨工业大学     这些学校还是厅局级单位，并不是副部级单位。    有 7 所学校属于 985、211 工程院校，但不属于副部级大学：东北大学、华东师范大学、中国海洋大学、湖南大学、电子科技大学、华南理工大学、中央民族大学  其中前 6 所为教育部直属高校，中央民族大学为国家民族事务委员会直属   民办高校一般不署行政级别 部分地级市把几个中专合并为大专，一般为县处级 中专重高正处，普高副处，初中正科，小学副科   常见问题 局长的区别 国家部委的司局=省的厅局 \u0026gt; 地级市处局 \u0026gt; 县级政府的科局\n公务员 vs 参公 vs 事业编  公务员是行政编 公务员和参公：都是参加国考或省考，考行测和申论 事业编：事业单位招聘，考公共基础知识   市直单位事业编 \u0026gt; 乡镇公务员副科 \u0026gt; 乡镇公务员\n 职务，职级，级别  参考  B 站 中国行政区划详解 维基百科 中华人民共和国公务员 知乎 公务员职务、职级与级别全面解读 知乎 行政级别分哪几级？局级是哪一级？ 知乎 中国高校的行政级别有哪几个级别？  ","date":1653207338,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1653207338,"objectID":"7f9625f2216af5d4daa69b02958f68d9","permalink":"https://blog.kingye.me/post/civil-service-of-china/","publishdate":"2022-05-22T16:15:38+08:00","relpermalink":"/post/civil-service-of-china/","section":"post","summary":"每一级行政机构下设有内设和外管两套系统，外管指其管辖下级行政","tags":["政治"],"title":"中国公务员职务","type":"post"},{"authors":["叶王"],"categories":["出版图书","翻译"],"content":"","date":1633070741,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1633070741,"objectID":"80cd1931e95ed6efa02fa1a203549aad","permalink":"https://blog.kingye.me/publication/201posd/","publishdate":"2022-05-04T14:45:41+08:00","relpermalink":"/publication/201posd/","section":"publication","summary":"《软件开发的201个原则》共9章，第1章为引言，后面8章将201个软件工程的原则划分为8个大的类别：一般原则、需求工程原则、设计原则、编码原则、测试原则、管理原则、产品保证原则和演变原则。","tags":["翻译","软件工程"],"title":"软件开发的201个原则","type":"publication"},{"authors":["叶王"],"categories":[],"content":"Certified Kubernetes Application Developer\n Kubernetes 应用程序开发者认证  考试模式：线上 考试时间：2 小时 认证有效期：3 年 软件版本：Kubernetes v1.21 重考政策：可接受重考 经验水平：中级 考生需于购买考试后，12 个月内进行考试 通过认证考试的考生将获得 PDF 认证证书 问题预览    考试内容  Core Concepts: 13% Configuration: 18% Multi-Container Pods: 10% Observability: 18% Pod Design: 20% Services \u0026amp; Networking: 13% State Persistence: 8%  详细内容\n 核心概念: 13％  了解 Kubernetes API 原语 创建和配置基本窗格   配置: 18％  了解 ConfigMaps 了解 SecurityContexts 定义应用程序的资源需求 创造和消费秘密 了解 ServiceAccounts   Multi-Container Pods: 10％  了解 Multi-Container Pod 设计模式（例如，大使，适配器，边车）   可观察性: 18％  了解 LivenessProbes 和 ReadinessProbes 了解容器日志记录 了解如何监控 Kubernetes 中的应用程序 了解 Kubernetes 中的调试   Pod 设计: 20％  了解如何使用标签，选择器和注释 了解部署以及如何执行滚动更新 了解部署以及如何执行回滚 了解 Jobs 和 CronJobs   服务与网络: 13％  了解服务 展示对 NetworkPolicies 的基本了解   持续状态: 8％  CKAD 2021 2021-09-28 之后 (Quarterly exam updates are planned to match Kubernetes releases.)\n Application Design and Build – 20%  Define, build and modify container images Understand Jobs and CronJobs Understand multi-container Pod design patterns (e.g. sidecar, init and others) Utilize persistent and ephemeral volumes   Application Environment, Configuration and Security – 25%  Discover and use resources that extend Kubernetes (CRD) Understand authentication, authorization and admission control Understanding and defining resource requirements, limits and quotas Understand ConfigMaps Create \u0026amp; consume Secrets Understand ServiceAccounts Understand SecurityContexts   Application Deployment – 20%  Use Kubernetes primitives to implement common deployment strategies (e.g. blue/green or canary) Understand Deployments and how to perform rolling updates Use the Helm package manager to deploy existing packages   Services and Networking – 20%  Demonstrate basic understanding of NetworkPolicies Provide and troubleshoot access to applications via services Use Ingress rules to expose applications   Application Observability and Maintenance – 15%  Understand API deprecations Implement probes and health checks Use provided tools to monitor Kubernetes applications Utilize container logs Debugging in Kubernetes     教程  dgkanatsios/CKAD-exercises  twajr/ckad-prep-notes  lucassha/CKAD-resources  bmuschko/ckad-prep  bmuschko/ckad-crash-course  bbachi/CKAD-Practice-Questions  saripurigopi/CKAD  jbigtani/crack-CKAD   ","date":1629117698,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1629117698,"objectID":"8a2b322354b3ac81bafb8bf0c50c5112","permalink":"https://blog.kingye.me/post/ckad/","publishdate":"2021-08-16T20:41:38+08:00","relpermalink":"/post/ckad/","section":"post","summary":"Certified Kubernetes Application Developer Kubernetes 应用程序开发者认证 考试模式：线上 考试时间：2 小时 认","tags":[],"title":"CKAD 考试准备","type":"post"},{"authors":["叶王"],"categories":["DIY"],"content":"本系列手把手教你使用 GitHub Pages 和 Hugo 创建一个属于你的网站，包括博客系统，笔记系统等。\n 无需购买服务器资源。\n  创建博客 注：你也可以使用 hexo, jekyll 等其他静态博客生成工具，详情自己百度。\n安装 hugo MacOS 安装 hugo\n# 若未安装 homebrew，参考这里安装：https://treehouse.github.io/installation-guides/mac/homebrew brew install hugo 其他系统参考：\n Windows 安装 hugo Linux 安装 hugo  创建博客 # ilivelearnteach.github.io 为本地目录名，可以随意更改 hugo new site ilivelearnteach.github.io 参考：Hugo Quick Start\n选择一个主题 假设你喜欢主题 Even\n# 进入你刚创建的博客目录 cd ilivelearnteach.github.io # 使用 git 管理你的博客 # 不了解 git 的同学，可以参考教程进行学习（重要不紧急）：https://www.liaoxuefeng.com/wiki/896043488029600 git init # 添加 even 主题 git submodule add https://github.com/olOwOlo/hugo-theme-even themes/even 更多主题见：Hugo Themes\n配置博客 （假设使用 Even 主题）在主题的 exampleSite 目录下有一个 config.toml 文件，将这个 config.toml 文件复制到你的站点目录下，根据自己的需求更改即可。\n注意修改 baseURL 为 \u0026#34;http://ilivelearnteach.github.io/\u0026#34;\n注：具体配置请参考你选择的主题的官方文档\n创建博客文章 # 创建博客文章 hugo new post/my-first-post.md # 然后打开文件 `ilivelearnteach.github.io/content/post/my-first-post.md`， # 把 `draft: true` 改成 `draft: false` # 注意：even 主题使用的是 post，但是很多主题是 posts，所以是下面这个命令， # 还是那句话，具体参考你选择主题的官方文档 # hugo new posts/my-first-post.md 本地预览博客 hugo server 打开 http://localhost:1313/ 就可以预览你的博客了\n 部署博客 注：你还可以使用 GitLab，Bitbucket，或者国内的 gitee，coding.net 等部署博客。\n详情参考：Hugo Hosting \u0026amp; Deployment 或者进行百度搜索。\n注册 github 账户 假设用户名为 ilivelearnteach\n创建仓库 创建仓库 ilivelearnteach.github.io\n 仓库名必须是 你的用户名.github.io 这三个必须至少勾选一个（使仓库生成 main 分支，否则后续会出错）   提交博客 使用 submodule 管理博客内容 # ilivelearnteach 换成你的用户名 git submodule add -b main https://github.com/ilivelearnteach/ilivelearnteach.github.io public 生成博客内容并提交 # 生成博客内容 hugo # 进入 public 目录 cd public # 提交博客到 git 管理 git add . git commit -m \u0026#34;my first blog\u0026#34; # 提交博客到 github git push origin main 稍等一会儿，直接访问 https://ilivelearnteach.github.io/ 就可以看到博客了。\nPS: GitHub Pages 会自动开启。\n打开 https://github.com/ilivelearnteach/ilivelearnteach.github.io 的 settings 页面即可以看到。\n如果没有自动开启 GitHub Pages，就手动选择 main 分支，/ (root) 路径，点击 Save 即可。\n更多详情参考：Hugo Host on GitHub\n 我们已经搭建了一个基本的博客系统，你已经可以使用喜欢的编辑器（推荐 VSCode） 进行文章编写，使用 Git 提交修改到 GitHub，由其自动部署到 GitHub Pages，读者就可以读取到你的新博文。\n但是还存在一些问题，比如：\n 我们只提交了博客生成的数据，而博客原始数据并没有提交到 GitHub，如果你的博客源码丢失了，就无法找回； 编写博客后，我们需要手动进行 git 管理，没有实现自动化；  管理原始数据 新建仓库 如 ilivelearnteach.com\n注：建议为私有仓库，保护博客源码。\n提交原始数据 # 进入你的博客目录 cd path-to-your-blog/ # ilivelearnteach.com 为新建的仓库名 git remote add origin https://github.com/ilivelearnteach/ilivelearnteach.com # 提交内容 git add . git commit -m \u0026#34;my blog code\u0026#34; git branch -M main # 提交博客到 github git push -u origin main  自动化脚本 想实现的目标是：每次创建或更新博文，执行 ./deploy.sh 命令，一键完成所有后续动作。\n创建脚本 在博客根目录创建脚本文件 deploy.sh，内容为：\n#!/bin/sh  set -x # 可以修改成自己的博客名 printf \u0026#34;\\033[0;32m ilivelearnteach.com Deploying updates to GitHub...\\033[0m\\n\u0026#34; cd $(dirname \u0026#34;$0\u0026#34;) # Commit changes. msg=\u0026#34;rebuilding site $(date)\u0026#34; if [ -n \u0026#34;$*\u0026#34; ]; then msg=\u0026#34;$*\u0026#34; fi # update the theme git submodule update --remote # remove old files rm -rf public/* # Build the project. hugo # Go To Public folder cd public # Add changes to git. git add . git commit -m \u0026#34;$msg\u0026#34; # Push to blog repo and trigger building blog. git push origin main # push to source repo cd .. git add . git commit -m \u0026#34;$msg\u0026#34; git push origin main 运行脚本 # 修改文件属性为可执行（只需要第一次执行） chmod +x deploy.sh # 创建或修改博客 # 创建博客文章 hugo new post/my-second-post.md # 然后打开文件 `ilivelearnteach.github.io/content/post/my-second-post.md`， # 把 `draft: true` 改成 `draft: false` # 执行脚本，自动提交博客源码和生成的博客到 GitHub，博客将自动更新 ./deploy.sh # 当然你可以写 commit 信息，记录本次博客更新的内容 # ./deploy.sh \u0026#34;Your optional commit message\u0026#34;  readmore 效果，导流到公众号 \u0026lt;script src=\u0026#34;https://readmore.openwrite.cn/js/readmore.js\u0026#34; type=\u0026#34;text/javascript\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; const btw = new BTWPlugin(); btw.init({ id: \u0026#39;article\u0026#39;, blogId: \u0026#39;17463-1635735167913-236\u0026#39;, name: \u0026#39;叶王说\u0026#39;, qrcode: \u0026#39;https://cdn.jsdelivr.net/gh/ikingye/imagehost/file/叶王说%20微信公众号%20二维码%20搜一搜.png\u0026#39;, keyword: \u0026#39;博客\u0026#39;, }); \u0026lt;/script\u0026gt;  TODO:\n 创建一个包含多个博客的网站，效果参考：https://kingye.me 统计与评论  ","date":1607758882,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1607758882,"objectID":"26320cbc760b653bab84dc3005d6a69b","permalink":"https://blog.kingye.me/post/make-a-blog/","publishdate":"2020-12-12T15:41:22+08:00","relpermalink":"/post/make-a-blog/","section":"post","summary":"本文将手把手教你使用 [GitHub Pages](https://pages.github.com/) 和 [Hugo](https://gohugo.io/) 搭建一个属于你的网站，包括博客系统，日志系统，私人笔记本等。无需购买服务器资源。","tags":["博客"],"title":"搭建一个博客网站","type":"post"},{"authors":["叶王"],"categories":["Slide"],"content":"Kubernetes 网络从零开始 One  Two  Three  --  Only the speaker can read these notes Press S key to view    一、计算机网络基础 自底向上\n 1. 物理层  物理层负责把两台计算机连起来， 计算机之间通过高低电频来传送 0,1 这样的电信号。   集线器 怎么知道数据包是不是发给自己的呢\n 2 数据链路层 只发给目标 MAC 地址指向的那台电脑\n 交换机 switch switch 本身就是一种 bridge/网桥\n 3 网络层 如果机器数量超过了路由器的网口数量\n 路由器 1  MAC 长度为 48 位  如：00-16-EA-AE-3C-40 前 24 位（00-16-EA）代表网络硬件制造商的编号 后 24 位（AE-3C-40）是该厂家自己分配的系列号   划分子网 引入 IP 地址   路由器 2     目的地址 下一跳 端口     192.168.0.0/24  0   192.168.0.254/32  0   192.168.1.0/24  1   192.168.1.254/32  1   192.168.2.0/24 192.168.100.5    192.168.100.0/24  2   192.168.100.4/32  2    路由表是各种路由算法 + 人工配置逐步完善起来的\n  路由器 3 数据包的两个 IP 地址不变，MAC 地址不断变化\n 4 传输层 (TCP, UDP)  5 会话层, 6. 表示层  表示层、会话层的东西，更多的是做成了一种标准件，直接被拿来用，集成进了应用中。 比如说你要做一个视频聊天，你需要会话控制，实现拨号、呼叫、通话、暂停、挂断等，然后你拿来了 sip，这就是会话层的东西； 你需要视频的编码与压缩，把你这采集的视频信号传输到对面并播放，然后你拿来了 H.264，这个就是表示层的东西。   5 会话层, 6. 表示层  会话层：为两端通信实体建立连接（会话），中间有认证鉴权以及检查点记录（供会话意外中断的时候可以继续，类似断点续传）。 表示层：决定数据的展现（编码）形式，如同一部电影可以采样、量化、编码为 RMVB、AVI，一张图片能够是 JPEG、BMP、PNG 等。   7 应用层  应用层：就是应用软件使用的协议，如邮箱使用的 POP3，SMTP、远程登录使用的 Telnet、获取 IP 地址的 DHCP、域名解析的 DNS、网页浏览的 http 协议等；这部分协议主要是规定应用软件如何去进行通信的。   8 有趣的问题 🤔  MAC 地址可以修改吗？ 有了 MAC 地址为什么还需要 IP？ 可以没有 MAC 地址吗？  交换机既然可以学习 MAC 地址，那就一定可以学习 IP 地址。这样，每个网口所连电脑的 IP 映射关系也就知道了。 电脑 A 如果想给 C 发数据，可以不查 C 的 MAC 地址，而是直接给交换机发一个 IP 报文（注意，这次没有 MAC 帧）。交换机收到后直接转发给电脑 C。整个过程就仿佛回到了最开始的点对点链接路。 现在没有去掉 MAC 地址，可能是因为以太网设备已经遍布全球，也足够便宜，已经没有必要再优化了。     二、容器网络  2.1 隔离  Linux Namespaces  Mount：隔离文件系统加载点； UTS：隔离主机名和域名； IPC：隔离跨进程通信（IPC）资源； PID：隔离 PID 空间； 网络：隔离网络接口； 用户：隔离 UID/GID 空间； Cgroup：隔离 cgroup 根目录。   namespace 问题  基于 Linux Namespace 的隔离机制相比于虚拟化技术也有很多不足之处，其中最主要的问题就是：隔离得不彻底 容器只是运行在宿主机上的一种特殊的进程，那么多个容器之间使用的就还是同一个宿主机的操作系统内核  要在 Windows 宿主机上运行 Linux 容器，或者在低版本的 Linux 宿主机上运行高版本的 Linux 容器，都是行不通的   在 Linux 内核中，有很多资源和对象是不能被 Namespace 化的，最典型的例子就是：时间  容器中的程序使用 settimeofday(2) 系统调用修改了时间，整个宿主机的时间都会被随之修改     限制：Linux Cgroups  Linux Cgroups 的全称是 Linux Control Group。它最主要的作用，就是限制一个进程组能够使用的资源上限，包括 CPU、内存、磁盘、网络带宽等等   Docker network namespace  ns 保存目录一般是 /var/run/docker/netns/  非默认的 /var/run/netns/ 路径 所以 ip netns list 没有 docker 创建的 ns     2.2 通信  跨 net ns 通信：veth pair  veth 是虚拟以太网卡（Virtual Ethernet）的缩写 veth 设备总是成对的 veth pair 一端发送的数据会在另外一端接收，非常像 Linux 的双向管道   单机容器通信：网桥  不同 net ns 如何互通？ 通过两个接口连接两个冲突域的装置称为网桥 网桥的作用相当于 OSI 模型中的数据链路层   跨主机通信  NAT：利用宿主机的 IP 和 iptables 来达到容器与主机之间的通信 Tunnel（overlay）：通过软件构建一个覆盖在已有宿主机网络之上的，可以把所有容器连通在一起的虚拟网络 Routing：通过路由配置的方式让容器对容器，容器对宿主机之间相通信   tun/tap 设备  从 Linux 文件系统的角度看，是用户可以用文件句柄操作的字符设备 从网络虚拟化角度看，是虚拟网卡，一端连着网络协议栈，另一端连着用户态程序  网络栈主要包括：网卡（Network Interface）、回环设备（Loopback Device）、路由表（Routing Table），iptables 规则和 DNS 配置等   tun/tap 可以将 TCP/IP 协议栈处理好的网络包发送给任何一个使用 tun/tap 驱动的进程，由进程处理后发到物理链路中  tun/tap 像是用户程序空间的钩子，可以很方便地将对网络包的处理程序挂在这个钩子上，OpenVPN、Vtun、flannel 都是基于它实现隧道包封装的。     tun/tap 原理  tun 虚拟的是点对点设备  tun 设备的/dev/tunX文件收发的是 IP 包，因此只能工作在 L3   tap 虚拟的是以太网设备  tap 设备的 /dev/tapX 文件收发的是链路层数据包，可以与物理网卡做桥接   对 tun/tap 设备而言，它与物理网卡的不同表现在它的数据源不是物理链路，而是来自用户态   Flannel Flannel 项目是 CoreOS 公司主推的容器网络方案。\nFlannel 项目本身只是一个框架，真正为我们提供容器网络功能的，是 Flannel 的后端实现，分别是：\n UDP（最早实现，性能最差，弃用）  Flannel 之所以最先选择 UDP 模式，就是因为这种模式是最直接、也是最容易理解的容器跨主网络实现   VXLAN host-gw   Flannel UDP 方案 # Node 1 $ ip route # 最长匹配原则 default via 10.168.0.1 dev eth0 100.96.0.0/16 dev flannel0 proto kernel scope link src 100.96.1.0 100.96.1.0/24 dev docker0 proto kernel scope link src 100.96.1.1 10.168.0.0/24 dev eth0 proto kernel scope link src 10.168.0.2 # Node 2 $ ip route default via 10.168.0.1 dev eth0 100.96.0.0/16 dev flannel0 proto kernel scope link src 100.96.2.0 100.96.2.0/24 dev docker0 proto kernel scope link src 100.96.2.1 10.168.0.0/24 dev eth0 proto kernel scope link src 10.168.0.3 $ etcdctl ls /coreos.com/network/subnets /coreos.com/network/subnets/100.96.1.0-24 /coreos.com/network/subnets/100.96.2.0-24 /coreos.com/network/subnets/100.96.3.0-24 $ etcdctl get /coreos.com/network/subnets/100.96.2.0-24 {\u0026#34;PublicIP\u0026#34;:\u0026#34;10.168.0.3\u0026#34;}  Flannel VXLAN  VXLAN：即 Virtual Extensible LAN，是 Linux 内核本身就支持的一种网络虚似化技术 VTEP: VXLAN Tunnel End Point  # 在 Node 1上 $ route -n 10.1.16.0 10.1.16.0 255.255.255.0 UG 0 0 0 flannel.1 $ ip neigh show dev flannel.1 10.1.16.0 lladdr 5e:f8:4f:00:e3:37 PERMANENT # flannel.1 “网桥” 对应的 FDB 信息，找到目标宿主机 IP $ bridge fdb show flannel.1 | grep 5e:f8:4f:00:e3:37 5e:f8:4f:00:e3:37 dev flannel.1 dst 10.168.0.3 self permanent  Flannel host-gw # node1 $ ip route 10.244.1.0/24 via 10.168.0.3 dev eth0  主机会充当这条容器通信路径里的网关，这也正是host-gw的含义 通过 Etcd 和宿主机上的 flanneld 来维护路由信息 要求集群宿主机之间是二层连通的   Calico  边界网关：路由表里拥有其他自治系统里的主机路由信息 Calico 不会在宿主机上创建任何网桥设备  # node 2 10.233.2.3 dev cali5863f3 scope link  Calico IPIP 模式 # node 1 10.233.2.0/24 via 192.168.2.2 tunl0  Calico IPIP 模式与 Flannel VXLAN 模式的性能大致相当 公有云环境下，宿主机之间的网关，肯定不会允许用户进行干预和设置 在私有部署的环境下，想办法将宿主机网关也加入到 BGP Mesh 里从而避免使用 IPIP   三、Kubernetes 网络  CNI CNI 网桥，它在宿主机上的设备名称默认是：cni0\n# 子网范围可以在部署时配置 # 部署完成后，可以修改 kube-controller-manager 的配置文件来指定 $ kubeadm init --pod-network-cidr=10.244.0.0/16  网络方案：创建和配置 flannel.1 设备、配置宿主机路由、配置 ARP 和 FDB 表里的信息 CNI 插件：配置 Infra 容器里面的网络栈，并把它连接到 CNI 网桥   pod 网络 这个其实前面都讲过了\n service (负载均衡)  Service …","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1549324800,"objectID":"c3f23055b25f6c7c65009ec082d773bb","permalink":"https://blog.kingye.me/slides/kubernetes-network/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/kubernetes-network/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":["Kubernetes","网络","Slide","PPT"],"title":"Kubernetes 网络从零开始","type":"slides"},{"authors":null,"categories":null,"content":"综合  学习笔记  计算机  计算机笔记 网络学习笔记 算法学习笔记 Linux 学习笔记 Kubernetes 学习笔记 Machine Learning 学习笔记 面试笔记  一年一语言  C 学习笔记【2013 年】 PHP 学习笔记【2014 年】 JavaScript 学习笔记【2015 年】 Python 学习笔记【2016 年】 Java 学习笔记【2017 年】 C++ 学习笔记【2018 年】 Go 学习笔记【2019 年】 Rust 学习笔记【2020 年】 Kotlin 学习笔记【2021 年】 Scala 学习笔记【2022 年】 Julia 学习笔记【2023 年】 C# 学习笔记【2024 年】 TypeScript 学习笔记【2025 年】 Swift 学习笔记【2026 年】 候选  Erlang R F# Lua Clojure Elixir Haskell Ruby Dart Perl VB.NET Groovy    ","date":1530144000,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1530144000,"objectID":"db235fc914867ffea6b540c8732499d5","permalink":"https://blog.kingye.me/notes/","publishdate":"2018-06-28T00:00:00Z","relpermalink":"/notes/","section":"","summary":"综合 学习笔记 计算机 计算机笔记 网络学习笔记 算法学习笔记 Linux 学习笔","tags":null,"title":"叶王笔记","type":"docs"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1461715200,"objectID":"d1311ddf745551c9e117aa4bb7e28516","permalink":"https://blog.kingye.me/project/external-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/external-project/","section":"project","summary":"An example of linking directly to an external project website using `external_link`.","tags":null,"title":"External Project","type":"project"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1461715200,"objectID":"8f66d660a9a2edc2d08e68cc30f701f7","permalink":"https://blog.kingye.me/project/internal-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/internal-project/","section":"project","summary":"An example of using the in-built project page.","tags":null,"title":"Internal Project","type":"project"}]